import numpy as np
from _typeshed import Incomplete
from multiprocessing.shared_memory import SharedMemory
from typing import Optional

class SharedMemoryArray:
    _name: Incomplete
    _shape: Incomplete
    _datatype: Incomplete
    _buffer: Incomplete
    _lock: Incomplete
    _array: Incomplete
    _is_connected: bool
    def __init__(self, name: str, shape: tuple, datatype: np.dtype, buffer: Optional[SharedMemory]) -> None: ...
    @classmethod
    def create_array(cls, name: str, prototype: np.ndarray) -> SharedMemoryArray: ...
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def read_data(self, index: int | slice) -> np.ndarray: ...
    def write_data(self, index: int | slice, data: np.ndarray) -> None: ...
    @property
    def datatype(self) -> np.dtype: ...
    @property
    def name(self) -> str: ...
    @property
    def shape(self) -> tuple: ...
    @property
    def is_connected(self) -> bool: ...
