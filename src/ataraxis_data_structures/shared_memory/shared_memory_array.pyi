from typing import Any
from contextlib import contextmanager
from collections.abc import Generator
from multiprocessing.shared_memory import SharedMemory

import numpy as np
from _typeshed import Incomplete
from numpy.typing import NDArray as NDArray

class SharedMemoryArray:
    _name: str
    _shape: tuple[int, ...]
    _datatype: np.dtype[Any]
    _buffer: SharedMemory | None
    _lock: Incomplete
    _array: NDArray[Any]
    _connected: bool
    _destroy_buffer: bool
    def __init__(self, name: str, shape: tuple[int, ...], datatype: np.dtype[Any], buffer: SharedMemory) -> None: ...
    def __repr__(self) -> str: ...
    def __del__(self) -> None: ...
    def __getitem__(self, index: int | slice) -> Any: ...
    def __setitem__(self, index: int | slice, value: Any) -> None: ...
    def enable_buffer_destruction(self) -> None: ...
    @classmethod
    def create_array(cls, name: str, prototype: NDArray[Any], *, exists_ok: bool = False) -> SharedMemoryArray: ...
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def destroy(self) -> None: ...
    @contextmanager
    def array(self, *, with_lock: bool = True) -> Generator[NDArray[Any], None, None]: ...
    @property
    def datatype(self) -> np.dtype[Any]: ...
    @property
    def name(self) -> str: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def is_connected(self) -> bool: ...
